/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ctrl")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ctrl[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("ctrl[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "ctrl";
}

SIGNAL("data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("data[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "data";
}

SIGNAL("flags")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("flags[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("flags[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "flags";
}

SIGNAL("overflow")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("__OVERFLOW")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("item_5")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("pop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("push")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("zero_state")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 98;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("ctrl[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ctrl[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ctrl[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ctrl[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ctrl[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ctrl[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("ctrl[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 90.0;
	}
}

TRANSITION_LIST("ctrl[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 90.0;
	}
}

TRANSITION_LIST("data[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 310.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("flags[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("flags[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 580.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 105.0;
	}
}

TRANSITION_LIST("overflow")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 580.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 105.0;
	}
}

TRANSITION_LIST("__OVERFLOW")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 590.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 235.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 105.0;
	}
}

TRANSITION_LIST("item_0")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 310.0;
	}
}

TRANSITION_LIST("item_1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 280.0;
	}
}

TRANSITION_LIST("item_2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("item_3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 270.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 220.0;
	}
}

TRANSITION_LIST("item_4")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 190.0;
	}
}

TRANSITION_LIST("item_5")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 330.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 420.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 105.0;
	}
}

TRANSITION_LIST("pop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 380.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 370.0;
	}
}

TRANSITION_LIST("push")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 310.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 90.0;
	}
}

TRANSITION_LIST("zero_state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 180.0;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 35.0;
		LEVEL 0 FOR 340.0;
	}
}

TRANSITION_LIST("data[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 40.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 40.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

TRANSITION_LIST("data[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 10.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL Z FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 10.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL Z FOR 40.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 20.0;
		LEVEL X FOR 10.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 20.0;
			LEVEL Z FOR 10.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 90.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "ctrl[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14, 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "data[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "flags";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "flags[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "flags[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "overflow";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "zero_state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "item_5";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "__OVERFLOW";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "pop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "push";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 46;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 830000;
	MASTER = TRUE;
}
;
